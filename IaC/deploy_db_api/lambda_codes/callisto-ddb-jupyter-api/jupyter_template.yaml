---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ user_namespace }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ endpoint_uid }}-sa
  namespace: {{ user_namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ user_namespace }}
  name: {{ endpoint_uid }}-scale-deployment-permission
rules:
- apiGroups: ["apps"]
  resources: ["deployments/scale"]
  verbs: ["patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ endpoint_uid }}-scale-deployment-permission-binding
  namespace: {{ user_namespace }}
subjects:
- kind: ServiceAccount
  name: {{ endpoint_uid }}-sa
  namespace: {{ user_namespace }}
roleRef:
  kind: Role
  name: {{ endpoint_uid }}-scale-deployment-permission  # 앞에서 정의한 Role의 이름
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ endpoint_uid }}-pvc
  namespace: {{ user_namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: {{ storage }}Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ user_namespace }}
  name: deployment-{{ endpoint_uid }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app-{{ endpoint_uid }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-{{ endpoint_uid }}
    spec:
      serviceAccountName: {{ endpoint_uid }}-sa
      securityContext:
        fsGroup: 100
      containers:
      - image: {{ ecr_uri }}/callisto-jupyter-base-notebook:latest
        imagePullPolicy: Always
        name: app-{{ endpoint_uid }}
        command: ["start-notebook.sh", "--NotebookApp.token=''", "--NotebookApp.password=''", "--NotebookApp.base_url=/{{ endpoint_uid }}", "--NotebookApp.allow_remote_access=True", "--NotebookApp.allow_origin='*'", "--NotebookApp.trust_xheaders=True"]
        ports:
        - containerPort: 8888
        env:
        - name: NAMESPACE
          value: "{{ user_namespace }}"
        - name: DEPLOYMENT_NAME
          value: "deployment-{{ endpoint_uid }}"
        - name: INACTIVITY_TIME
          value: "{{ inactivity_time }}"
        - name: PIP_USER
          value: "true"
        - name: PIP_TARGET
          value: "/home/jovyan/.local"
        resources:
            requests:
                cpu: {{ cpu_core }}m
                memory: {{ memory }}M
            limits:
                cpu: {{ cpu_core }}m
                memory: {{ memory }}M
        volumeMounts:
        - mountPath: /home/jovyan
          name: {{ endpoint_uid }}-storage
      volumes:
      - name: {{ endpoint_uid }}-storage
        persistentVolumeClaim:
          claimName: {{ endpoint_uid }}-pvc
      nodeSelector:
        karpenter.sh/nodepool: jupyter-nodepool
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ user_namespace }}
  name: service-{{ endpoint_uid }}
spec:
  ports:
    - port: 8888
      targetPort: 8888
      protocol: TCP
  type: ClusterIP
  selector:
    app.kubernetes.io/name: app-{{ endpoint_uid }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: {{ user_namespace }}
  name: ingress-{{ endpoint_uid }}
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/enable-websocket: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
        - path: /{{ endpoint_uid }}
          pathType: Prefix
          backend:
            service:
              name: service-{{ endpoint_uid }}
              port:
                number: 8888
